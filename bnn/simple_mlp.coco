import numpy as np
import tensorflow as tf

from ml.train import train_classifier
from ml.datasets.mnist import load_mnist

if __name__ == '__main__':
  # Placeholders
  features = tf.placeholder('float', [None, 784])
  labels = tf.placeholder('float', [None, 10])

  # Computation graph
  weights = {
    'hidden': tf.Variable(tf.random_normal([784, 100])),
    'output': tf.Variable(tf.random_normal([100, 10]))
    }
  biases =  {
    'hidden': tf.Variable(tf.random_normal([100])),
    'output': tf.Variable(tf.random_normal([10]))
    }
  logits = (
    features
      |> xs -> (xs `tf.matmul` weights['hidden']) + biases['hidden']
      |> hs -> (hs `tf.matmul` weights['output']) + biases['output']
    )
  optimiser = tf.train.AdamOptimizer(1e-3)
  mnist = load_mnist()
  train_classifier(mnist, features, labels, logits, optimiser, minibatch_size=256, num_epochs=25)
